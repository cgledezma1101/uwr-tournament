Parameters:
    TournamentsSnapshotArn:
        Description: ARN of the latest snapshot of the tournaments database
        Type: String
    DatabasePassword:
        Description: The password to use to authenticate with the uwr_tournament database
        Type: String
    SendgridPassword:
        Description: The password to use to authenticate with Sendgrid
        Type: String
    AlbCertificateArn:
        Description: The ARN of the ACM certificate to use to sign HTTPS requests on the ALB
        Type: String

Resources:
    InternetGateway:
        Type: AWS::EC2::InternetGateway
    ApplicationVpc:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: '172.31.0.0/16'
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: InternetGateway
            VpcId:
                Ref: ApplicationVpc
    Subnet0:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-1a
            CidrBlock: '172.31.0.0/24'
            VpcId:
                Ref: ApplicationVpc
    Subnet1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: us-east-1b
            CidrBlock: '172.31.1.0/24'
            VpcId:
                Ref: ApplicationVpc
    SubnetAccessRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: ApplicationVpc
    SubnetAccessRoute:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId:
                Ref: InternetGateway
            RouteTableId:
                Ref: SubnetAccessRouteTable
    Subnet0RouteAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId:
                Ref: SubnetAccessRouteTable
            SubnetId:
                Ref: Subnet0
    DatabaseSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupName: uwr-tournaments-db-subnet-group
            DBSubnetGroupDescription: Defines the subnets in which the tournaments database is present
            SubnetIds:
                - Ref: Subnet0
                - Ref: Subnet1
    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Specifies access policies over the tournaments web server
            GroupName: uwr-tournaments-server-sg
            VpcId:
                Ref: ApplicationVpc
            SecurityGroupEgress:
                -
                    Description: Allow the webserver to connect with the database
                    CidrIp: '172.31.0.0/16'
                    IpProtocol: tcp
                    FromPort: '5432'
                    ToPort: '5432'
                -
                    Description: Allow HTTPS IPv4 egress to the webserver
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: tcp
                    FromPort: '443'
                    ToPort: '443'
                -
                    Description: Allow HTTP IPv4 egress to the webserver
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                -
                    Description: Allow SSH IPv4 egress to the webserver
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: tcp
                    FromPort: '22'
                    ToPort: '22'
            SecurityGroupIngress:
                -
                    Description: Allow SSH through IPv4
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: tcp
                    FromPort: '22'
                    ToPort: '22'
                -
                    Description: Allow SSH through IPv6
                    CidrIpv6: '::/0'
                    IpProtocol: tcp
                    FromPort: '22'
                    ToPort: '22'
                -
                    Description: Allow connections form within the VPC to the port where the application runs
                    CidrIp: 172.31.0.0/16
                    IpProtocol: tcp
                    FromPort: '8000'
                    ToPort: '8000'
    DatabaseSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Specifies access policies over the tournaments database
            GroupName: uwr-tournaments-db-sg
            VpcId:
                Ref: ApplicationVpc
            SecurityGroupEgress:
                -
                    Description: Allow HTTP IPv4 egress to the database to request updates
                    CidrIp: 0.0.0.0/0
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                -
                    Description: Allow HTTPS IPv4 egress to the database to request updates
                    CidrIp: 0.0.0.0/0
                    IpProtocol: tcp
                    FromPort: '443'
                    ToPort: '443'
            SecurityGroupIngress:
                -
                    Description: Allows the EC2 instance group to connect to the database
                    SourceSecurityGroupId:
                        'Fn::GetAtt':
                            - WebServerSecurityGroup
                            - GroupId
                    IpProtocol: tcp
                    FromPort: '5432'
                    ToPort: '5432'
    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Specifies access policies over the tournaments load balancer
            GroupName: 'uwr-tournaments-load-balancer-sg'
            VpcId:
                Ref: ApplicationVpc
            SecurityGroupEgress:
                -
                    Description: Allow the load balancer to connect with the underlying webservers
                    CidrIp: '172.31.0.0/16'
                    IpProtocol: 'tcp'
                    FromPort: '8000'
                    ToPort: '8000'
            SecurityGroupIngress:
                -
                    Description: Allow HTTP IPv4 access to the load balancer
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                -
                    Description: Allow HTTPS IPv4 access to the load balancer
                    CidrIp: '0.0.0.0/0'
                    IpProtocol: tcp
                    FromPort: '443'
                    ToPort: '443'
    TournamentsDatabase:
        Type: AWS::RDS::DBInstance
        Properties:
            DBSnapshotIdentifier:
                Ref: TournamentsSnapshotArn
            AllowMajorVersionUpgrade: true
            AutoMinorVersionUpgrade: true
            DBInstanceClass: db.t3.micro
            DBInstanceIdentifier: uwr-tournaments-db
            Engine: postgres
            EngineVersion: '14.2'
            Port: '5432'
            DBSubnetGroupName:
                Ref: DatabaseSubnetGroup
            VPCSecurityGroups:
                - Ref: DatabaseSecurityGroup
    WebServerAccessKey:
        Type: AWS::EC2::KeyPair
        Properties:
            KeyName: tournaments-server-access-key
            KeyType: rsa
    WebServerInstance:
        Type: AWS::EC2::Instance
        DependsOn:
            - GatewayAttachment
        Properties:
            ImageId: ami-04169656fea786776
            InstanceType: t2.micro
            KeyName:
                Ref: WebServerAccessKey
            AvailabilityZone:
                Fn::GetAtt:
                    - Subnet0
                    - AvailabilityZone
            NetworkInterfaces:
                -
                    DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    GroupSet:
                        - Ref: WebServerSecurityGroup
                    SubnetId:
                        Ref: Subnet0
            UserData:
                Fn::Base64:
                    Fn::Sub:
                        - |
                            #!/bin/bash
                            sudo apt-get update
                            sudo apt-get --assume-yes install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev postgresql postgresql-contrib libpq-dev
                            git clone https://github.com/rbenv/rbenv.git .rbenv
                            echo 'export PATH=$HOME/.rbenv/bin:$PATH' >> ~/.bashrc
                            echo 'eval "$(rbenv init - bash)"' >> ~/.bashrc
                            git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
                            echo 'export PATH=$HOME/.rbenv/plugins/ruby-build/bin:$PATH' >> ~/.bashrc
                            source ~/.bashrc
                            rbenv install -v 2.7.0
                            rbenv global 2.7.0
                            echo 'gem: --no-document' > ~/.gemrc
                            gem install rails -v 6.0
                            rbenv rehash
                            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                            . ~/.nvm/nvm.sh
                            nvm install 16
                            git clone https://github.com/cgledezma1101/uwr-tournament.git uwr-tournament
                            cd uwr-tournament/
                            bundle install

                            DATABASE_NAME=uwr_tournament \
                            DATABASE_USER=uwr_tournament \
                            DATABASE_PASSWORD=${DatabasePassword} \
                            DATABASE_HOST=${DatabaseHost} \
                            DATABASE_PORT=${DatabasePort} \
                            SENDGRID_USERNAME=cgledezma1101@gmail.com \
                            SENDGRID_PASSWORD=${SendgridPassword} \
                            rails server -e production -p 8000 -d
                        -
                            DatabaseHost:
                                Fn::GetAtt:
                                    - TournamentsDatabase
                                    - Endpoint.Address
                            DatabasePort:
                                Fn::GetAtt:
                                    - TournamentsDatabase
                                    - Endpoint.Port
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: uwr-tournaments-load-balancer
            IpAddressType: ipv4
            Scheme: internet-facing
            Type: application
            SecurityGroups:
                - Ref: LoadBalancerSecurityGroup
            Subnets:
                - Ref: Subnet0
                - Ref: Subnet1
    WebServerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: uwr-tournaments-webserver-tg
            IpAddressType: ipv4
            Port: '8000'
            Protocol: HTTP
            TargetType: instance
            VpcId:
                Ref: ApplicationVpc
            Targets:
                -
                    Id:
                        Ref: WebServerInstance
                    Port: '8000'
    HTTPSListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            Protocol: HTTPS
            Port: '443'
            LoadBalancerArn:
                Ref: LoadBalancer
            DefaultActions:
                -
                    Order: 1
                    Type: forward
                    TargetGroupArn:
                        Ref: WebServerTargetGroup
            Certificates:
                -
                    CertificateArn:
                        Ref: AlbCertificateArn
    HTTPRedirectListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            Protocol: HTTP
            Port: '80'
            LoadBalancerArn:
                Ref: LoadBalancer
            DefaultActions:
                -
                    Order: 1
                    Type: redirect
                    RedirectConfig:
                        Protocol: HTTPS
                        Port: '443'
                        Host: '#{host}'
                        Path: '/#{path}'
                        Query: '#{query}'
                        StatusCode: HTTP_301

Outputs:
    LoadBalancerDns:
        Description: The DNS name on which the load balancer can be reached. The Route53 address table should point to this
        Value:
            Fn::GetAtt:
                - LoadBalancer
                - DNSName
    WebserverIp:
        Description: The IP address on which the web server can be reached.
        Value:
            Fn::GetAtt:
                - WebServerInstance
                - PublicIp
    DatabaseDns:
        Description: DNS on which the database can be reached
        Value:
            Fn::GetAtt:
                - TournamentsDatabase
                - Endpoint.Address